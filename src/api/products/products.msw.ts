/**
 * Generated by orval v7.8.0 üç∫
 * Do not edit manually.
 * Cats example
 * The cats API description
 * OpenAPI spec version: 1.0
 */
import { faker } from '@faker-js/faker';

import { HttpResponse, delay, http } from 'msw';

import type { ProductListResponseDto, ProductResponseDto } from '.././model';

export const getProductControllerCreateResponseMock = (
  overrideResponse: Partial<ProductResponseDto> = {},
): ProductResponseDto => ({
  id: faker.number.int({ min: undefined, max: undefined }),
  name: faker.string.alpha(20),
  description: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
  price: faker.number.int({ min: undefined, max: undefined }),
  imageUrl: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
  stock: faker.number.int({ min: undefined, max: undefined }),
  category: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
  createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  ...overrideResponse,
});

export const getProductControllerFindAllResponseMock = (
  overrideResponse: Partial<ProductListResponseDto> = {},
): ProductListResponseDto => ({
  products: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
    () => ({
      id: faker.number.int({ min: undefined, max: undefined }),
      name: faker.string.alpha(20),
      description: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
      price: faker.number.int({ min: undefined, max: undefined }),
      imageUrl: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
      stock: faker.number.int({ min: undefined, max: undefined }),
      category: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
      createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
      updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
    }),
  ),
  count: faker.number.int({ min: undefined, max: undefined }),
  ...overrideResponse,
});

export const getProductControllerFindOneResponseMock = (
  overrideResponse: Partial<ProductResponseDto> = {},
): ProductResponseDto => ({
  id: faker.number.int({ min: undefined, max: undefined }),
  name: faker.string.alpha(20),
  description: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
  price: faker.number.int({ min: undefined, max: undefined }),
  imageUrl: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
  stock: faker.number.int({ min: undefined, max: undefined }),
  category: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
  createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  ...overrideResponse,
});

export const getProductControllerUpdateResponseMock = (
  overrideResponse: Partial<ProductResponseDto> = {},
): ProductResponseDto => ({
  id: faker.number.int({ min: undefined, max: undefined }),
  name: faker.string.alpha(20),
  description: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
  price: faker.number.int({ min: undefined, max: undefined }),
  imageUrl: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
  stock: faker.number.int({ min: undefined, max: undefined }),
  category: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
  createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  ...overrideResponse,
});

export const getProductControllerRemoveResponseMock = (
  overrideResponse: Partial<ProductResponseDto> = {},
): ProductResponseDto => ({
  id: faker.number.int({ min: undefined, max: undefined }),
  name: faker.string.alpha(20),
  description: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
  price: faker.number.int({ min: undefined, max: undefined }),
  imageUrl: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
  stock: faker.number.int({ min: undefined, max: undefined }),
  category: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
  createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  ...overrideResponse,
});

export const getProductControllerSearchResponseMock = (
  overrideResponse: Partial<ProductListResponseDto> = {},
): ProductListResponseDto => ({
  products: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
    () => ({
      id: faker.number.int({ min: undefined, max: undefined }),
      name: faker.string.alpha(20),
      description: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
      price: faker.number.int({ min: undefined, max: undefined }),
      imageUrl: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
      stock: faker.number.int({ min: undefined, max: undefined }),
      category: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
      createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
      updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
    }),
  ),
  count: faker.number.int({ min: undefined, max: undefined }),
  ...overrideResponse,
});

export const getProductControllerCreateMockHandler = (
  overrideResponse?:
    | ProductResponseDto
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<ProductResponseDto> | ProductResponseDto),
) => {
  return http.post('*/products', async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getProductControllerCreateResponseMock(),
      ),
      { status: 201, headers: { 'Content-Type': 'application/json' } },
    );
  });
};

export const getProductControllerFindAllMockHandler = (
  overrideResponse?:
    | ProductListResponseDto
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<ProductListResponseDto> | ProductListResponseDto),
) => {
  return http.get('*/products', async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getProductControllerFindAllResponseMock(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    );
  });
};

export const getProductControllerFindOneMockHandler = (
  overrideResponse?:
    | ProductResponseDto
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<ProductResponseDto> | ProductResponseDto),
) => {
  return http.get('*/products/:id', async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getProductControllerFindOneResponseMock(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    );
  });
};

export const getProductControllerUpdateMockHandler = (
  overrideResponse?:
    | ProductResponseDto
    | ((
        info: Parameters<Parameters<typeof http.patch>[1]>[0],
      ) => Promise<ProductResponseDto> | ProductResponseDto),
) => {
  return http.patch('*/products/:id', async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getProductControllerUpdateResponseMock(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    );
  });
};

export const getProductControllerRemoveMockHandler = (
  overrideResponse?:
    | ProductResponseDto
    | ((
        info: Parameters<Parameters<typeof http.delete>[1]>[0],
      ) => Promise<ProductResponseDto> | ProductResponseDto),
) => {
  return http.delete('*/products/:id', async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getProductControllerRemoveResponseMock(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    );
  });
};

export const getProductControllerSearchMockHandler = (
  overrideResponse?:
    | ProductListResponseDto
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<ProductListResponseDto> | ProductListResponseDto),
) => {
  return http.get('*/products/search/:query', async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getProductControllerSearchResponseMock(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    );
  });
};
export const getProductsMock = () => [
  getProductControllerCreateMockHandler(),
  getProductControllerFindAllMockHandler(),
  getProductControllerFindOneMockHandler(),
  getProductControllerUpdateMockHandler(),
  getProductControllerRemoveMockHandler(),
  getProductControllerSearchMockHandler(),
];
